#include <iostream>
#include <string>
using namespace std;

//类的继承：减少重复代码量
//语法： 
// class 子类: 继承方式 父类{
//
// }
// 子类 也称为 派生类
// 父类 也称为 基类

//继承的方式：公共继承、保护继承、私有继承


class base
{
public: //公共属性，类内类外均可访问
    int a;
protected:  //保护属性，类内可以访问，类外无法访问
    int b;
private:    //私有属性，类内可以访问，类外无法访问
    int c;
};

// 公共继承
class son1 : public base
{
public:
    void func()
    {
        a = 10;  // 父类中的公共权限成员 到子类中依然是公共权限
        b = 100; // 父类中的保护权限成员 到子类中依然是保护权限
        // 父类中的私有权限成员 子类无法访问，即下一行无法通过编译
        // c = 100;
    }
};
// 保护继承
class son2 : protected base
{
public:
    void func()
    {
        
        a = 10;  // 父类中的公共权限成员 到子类中变为保护权限
        b = 100; // 父类中的保护权限成员 到子类中依然是保护权限
        // 父类中的私有权限成员 子类无法访问，即下一行无法通过编译
        // c = 100;
    }
};
// 私有继承
class son3 : private base
{
public:
    void func()
    {
        
        a = 10;  // 父类中的公共权限成员 到子类中变为私有权限
        b = 100; // 父类中的保护权限成员 到子类中变为私有权限
        // 父类中的私有权限成员 子类无法访问，即下一行无法通过编译
        // c = 100;
    }
};

void test()
{
    son1 s1;
    s1.a = 11;
    // s1.b = 111;// 父类中的b是保护权限，类外无法访问

    son2 s2;
    // s2.a = 100; // 在保护继承的子类中，父类的公共属性a也变为保护属性，类外无法访问

    son3 s3;
    // s3.a = 100;// 在私有继承的子类中，父类的公共属性a也变为私有属性，类外无法访问
}


int main()
{
    test();
    system("pause");
    return 0;
} 